#!/usr/bin/env python3
"""
A CLI tool that dumps recent changes from a Trello board
"""
from trello_connect import TrelloConnect

import toml
import os
import sys
import argparse
from datetime import datetime, timedelta

def print_action(action):
    """
    Formats a given action,
    returns a list of formatted items to be printed by another function
    """
    clist = []
    display_key = action["display"]["translationKey"]
    try:
        if display_key == "action_comment_on_card":
            #print(action)
            clist.append("~~~Item updated:~~~")
            clist.append("\t\tDate: {}".format(action["date"]))
            clist.append("\t\t{}".format(action["data"]["text"]))
        elif display_key == "action_create_card":
            clist.append("~~~Item created:~~~")
            clist.append("\t\tDate: {}".format(action["date"]))
            clist.append("\t\tFiled under: {}".format(action["data"]["list"]["name"]))
            #print("\t\tComments: \n\t\t", from_card["desc"])
        elif display_key == "action_move_card_from_list_to_list":
            if action["data"]["listAfter"]["name"] == "Done":

                clist.append("~~~Item Marked as finished:~~~")
                clist.append("\t\tDate: {}".format(action["date"]))
                clist.append("\t\tDone: {}".format(action["data"]["card"]["name"]))
    except KeyError as kerr:
        print("Error: ", kerr)
        print(action)
        sys.exit(1)

    return clist

def date_is_recent(date_str, time_range):
    """
    returns a bool if a string date is within a range
    """
    time_now = datetime.now()
    action_time = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S.%fZ")
    time_diff = time_now - action_time
    return bool(time_diff < timedelta(days=time_range))

def print_recent_changes(cards, time_range):
    """
    Creates and prints the list of all changes
    Checks the date on every action, prints and formats actions in that time range
    """
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
    print("Changes in the past {} days:".format(time_range))
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")

    for card in cards:
        actions = card["actions"]
        clist = []
        starting_list = ""
        for action in actions:
            #We grab the list name from create so we have a better name for "filed under"
            if action["type"] == "createCard":
                starting_list = action["data"]["list"]["name"]
            if date_is_recent(action["date"], time_range):
                clist = clist + print_action(action)

        #if print_action returned some items, print header, then print list
        if len(clist) != 0:
            print("\n")
            if starting_list == "":
                starting_list = card["list"]["name"]
            print("============Item: {}, filed under {}".format(card["name"], starting_list))
            print("\n".join(clist))


def gather_list(to_print, client, new_date):
    """
    Get by-card info from a list of lists
    """
    clist = to_print["cards"]
    card_change_list = []
    for card in clist:
        act_date = card["dateLastActivity"]
        if date_is_recent(act_date, new_date): #check the activity date before we make another API query
            card_data = client.get_full_card_info(card["id"])
            card_change_list.append(card_data)

    #first we get the list of recent changes.
    return card_change_list

def dump_cards(auth, board, verbose):
    """
    Entry into the card printing function
    This relies on the API returning a full list of actions/history
    """
    client = TrelloConnect(auth["token"], auth["key"], verbose)
    lists = client.get_lists(board)
    new_date = 7
    #Gather entire cards across the board
    changelist = []
    for blist in lists:
        crd = client.get_cards(blist["id"])
        changes = gather_list(crd, client, new_date)
        changelist = changelist + changes

    #We print the recent changes at the top.
    print_recent_changes(changelist, new_date)

def get_settings():
    """
    Dump the settings from the toml file
    """
    homedir = os.path.expanduser("~")
    try:
        with open(homedir + "/.trello") as cfg:
            config = toml.loads(cfg.read())
    except FileNotFoundError as ioerr:
        print("{}".format(ioerr))
        print("No API key file has been found. Create one as ~/.trello")
        sys.exit(1)
    return config["auth"]

def main():
    """
    this script is responsible for parsing data from API calls,
    and gathering cards to query based on dates.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--board",
                        help="name of the board to dump to the screen",
                        type=str,
                        default="Work")
    parser.add_argument("-v", "--verbose",
                        help="enable verbose printing",
                        action="store_true")
    args = parser.parse_args()
    #Start by reading in settings.
    auth = get_settings()
    dump_cards(auth, args.board, args.verbose)

if __name__ == '__main__':
    main()
